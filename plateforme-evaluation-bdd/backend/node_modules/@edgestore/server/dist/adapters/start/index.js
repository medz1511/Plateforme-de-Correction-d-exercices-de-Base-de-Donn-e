'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var shared = require('@edgestore/shared');
var utils = require('../../utils-5819d5e1.js');
var providers_edgestore_index = require('../../providers/edgestore/index.js');
var shared$1 = require('../../shared-7c700083.js');
require('../../index-4491caf0.js');
require('@panva/hkdf');
require('cookie');
require('jose');
require('uuid');

// Helper to extract a cookie from the request's cookie header
function getCookie(req, cookieName) {
    const cookieHeader = req.headers.get('cookie');
    if (!cookieHeader) return undefined;
    return cookieHeader.split(';').map((cookieStr)=>cookieStr.trim()).reduce((acc, cookieStr)=>{
        const [name, ...rest] = cookieStr.split('=');
        if (name && rest.length > 0) {
            acc[name] = rest.join('=');
        }
        return acc;
    }, {})[cookieName];
}
function createEdgeStoreStartHandler(config) {
    const { provider = providers_edgestore_index.EdgeStoreProvider() } = config;
    const log = new utils.Logger(config.logLevel);
    globalThis._EDGE_STORE_LOGGER = log;
    log.debug('Creating Edge Store TanStack Start handler');
    return async ({ request })=>{
        try {
            const { pathname } = new URL(request.url);
            if (utils.matchPath(pathname, '/health')) {
                return new Response('OK', {
                    status: 200
                });
            } else if (utils.matchPath(pathname, '/init')) {
                let ctx = {};
                try {
                    ctx = 'createContext' in config ? await config.createContext({
                        req: request
                    }) : {};
                } catch (err) {
                    throw new shared.EdgeStoreError({
                        message: 'Error creating context',
                        code: 'CREATE_CONTEXT_ERROR',
                        cause: err instanceof Error ? err : undefined
                    });
                }
                const { newCookies, token, baseUrl } = await shared$1.init({
                    ctx,
                    provider,
                    router: config.router
                });
                const headers = new Headers();
                newCookies.forEach((cookie)=>headers.append('Set-Cookie', cookie));
                headers.set('Content-Type', 'application/json');
                return new Response(JSON.stringify({
                    token,
                    baseUrl
                }), {
                    status: 200,
                    headers
                });
            } else if (utils.matchPath(pathname, '/request-upload')) {
                const body = await request.json();
                const ctxToken = getCookie(request, 'edgestore-ctx');
                const result = await shared$1.requestUpload({
                    provider,
                    router: config.router,
                    body: body,
                    ctxToken
                });
                return new Response(JSON.stringify(result), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (utils.matchPath(pathname, '/request-upload-parts')) {
                const body = await request.json();
                const ctxToken = getCookie(request, 'edgestore-ctx');
                const result = await shared$1.requestUploadParts({
                    provider,
                    router: config.router,
                    body: body,
                    ctxToken
                });
                return new Response(JSON.stringify(result), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (utils.matchPath(pathname, '/complete-multipart-upload')) {
                const body = await request.json();
                const ctxToken = getCookie(request, 'edgestore-ctx');
                await shared$1.completeMultipartUpload({
                    provider,
                    router: config.router,
                    body: body,
                    ctxToken
                });
                return new Response(null, {
                    status: 200
                });
            } else if (utils.matchPath(pathname, '/confirm-upload')) {
                const body = await request.json();
                const ctxToken = getCookie(request, 'edgestore-ctx');
                const result = await shared$1.confirmUpload({
                    provider,
                    router: config.router,
                    body: body,
                    ctxToken
                });
                return new Response(JSON.stringify(result), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (utils.matchPath(pathname, '/delete-file')) {
                const body = await request.json();
                const ctxToken = getCookie(request, 'edgestore-ctx');
                const result = await shared$1.deleteFile({
                    provider,
                    router: config.router,
                    body: body,
                    ctxToken
                });
                return new Response(JSON.stringify(result), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (utils.matchPath(pathname, '/proxy-file')) {
                const urlParam = new URL(request.url).searchParams.get('url');
                if (typeof urlParam === 'string') {
                    const proxyRes = await fetch(urlParam, {
                        headers: {
                            cookie: request.headers.get('cookie') ?? ''
                        }
                    });
                    const data = await proxyRes.arrayBuffer();
                    const headers = new Headers();
                    headers.set('Content-Type', proxyRes.headers.get('Content-Type') ?? 'application/octet-stream');
                    return new Response(data, {
                        status: proxyRes.status,
                        headers
                    });
                } else {
                    return new Response(null, {
                        status: 400
                    });
                }
            } else {
                return new Response(null, {
                    status: 404
                });
            }
        } catch (err) {
            if (err instanceof shared.EdgeStoreError) {
                log[err.level](err.formattedMessage());
                if (err.cause) log[err.level](err.cause);
                const status = shared.EDGE_STORE_ERROR_CODES[err.code] || 500;
                return new Response(JSON.stringify(err.formattedJson()), {
                    status,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            }
            log.error(err);
            return new Response(JSON.stringify(new shared.EdgeStoreError({
                message: 'Internal server error',
                code: 'SERVER_ERROR'
            }).formattedJson()), {
                status: 500,
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }
    };
}

exports.createEdgeStoreStartHandler = createEdgeStoreStartHandler;
