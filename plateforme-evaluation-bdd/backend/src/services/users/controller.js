const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
const User  = require('./schema');
const Exam = require('../exam/schema')
const Submission = require('../submission/schema')
const { errorHandler } = require("../../utils/errorHandler");
const { sendAccountApprovalEmail } = require('../emailService');


const getAllUsers = async (req, res, next) => {
    try {
        const users = await User.findAll({ attributes: { exclude: ['password'] } });
        res.status(200).json(users);
    } catch (error) {
        next(errorHandler(500, "Erreur lors de la r√©cup√©ration des utilisateurs"));
    }
};

// üìå R√©cup√©rer un utilisateur par ID
const getUserById = async (req, res, next) => {
    try {
        const { id } = req.params;
        const user = await User.findOne({ where: { id: id } });
        if (!user) return next(errorHandler(404, "Utilisateur non trouv√©"));
        res.status(200).json(user);
    } catch (error) {
        next(errorHandler(500, "Erreur lors de la r√©cup√©ration de l'utilisateur"));
    }
};

// üìå Supprimer un utilisateur
const deleteUser = async (req, res, next) => {
    try {
        const user = await User.findByPk(req.params.id);
        if (!user) return next(errorHandler(404, "Utilisateur non trouv√©"));

        await user.destroy();
        res.status(200).json({ message: "Utilisateur supprim√© avec succ√®s" });
    } catch (error) {
        next(errorHandler(500, "Erreur lors de la suppression de l'utilisateur"));
    }
};

// üìå Mettre √† jour un utilisateur (y compris le mot de passe)
const updateUser = async (req, res, next) => {
    try {
        const { prenom, nom, email, password } = req.body;

        // V√©rifier si l'utilisateur existe
        const user = await User.findByPk(req.params.id);
        if (!user) return next(errorHandler(404, "Utilisateur non trouv√©"));

        // Pr√©parer les donn√©es de mise √† jour
        let updatedData = { prenom, nom, email };

        // Si un nouveau mot de passe est fourni, on le hache avant de l'enregistrer
        if (password) {
            const hashedPassword = await bcrypt.hash(password, 10);
            updatedData.password = hashedPassword;
        }

        // Mettre √† jour l'utilisateur
        await user.update(updatedData);

        res.status(200).json({ message: "Utilisateur mis √† jour avec succ√®s", user });
    } catch (error) {
        next(errorHandler(500, "Erreur lors de la mise √† jour de l'utilisateur"));
    }
};

const validateProfessor = async (req, res, next) => {
    try {
        const user = await User.findByPk(req.params.id);
        if (!user) return next(errorHandler(404, "Utilisateur non trouv√©"));

        if (user.role !== "professeur") {
            return next(errorHandler(400, "Seuls les professeurs peuvent √™tre valid√©s"));
        }

        user.status = "active";
        await user.save();

        res.status(200).json({ message: "Professeur activ√© avec succ√®s" });
    } catch (error) {
        next(errorHandler(500, "Erreur lors de la validation du professeur"));
    }
};

// üìå R√©cup√©rer les professeurs en attente d'approbation
const getPendingProfessors = async (req, res, next) => {
    try {
        const pendingProfessors = await User.findAll({
            where: { status: "pending", role: "professor" },
            attributes: ["id", "prenom", "nom", "email", "createdAt"] // S√©lectionner seulement les infos utiles
        });

        res.status(200).json(pendingProfessors);
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des professeurs en attente:", error);
        next(error);
    }
};

// üìå R√©cup√©rer tous les professeurs (actifs ou en attente)
const getAllProfessors = async (req, res, next) => {
    try {
        const professors = await User.findAll({
            where: { role: "professor" },
            include: [
                {
                    model: Exam, // üî• Jointure avec Exam
                    as: "exams",
                    attributes: ["id"],
                    include: [
                        {
                            model: Submission, // üî• Jointure avec Submission
                            as: "submissions",
                            attributes: ["id"], // On r√©cup√®re juste les ID des soumissions
                        },
                    ],
                },
            ],
        });

        // Transforme les donn√©es pour ajouter examsCount et studentsCount
        const formattedProfessors = professors.map(prof => ({
            ...prof.toJSON(),
            examsCount: prof.exams.length, // Nombre d‚Äôexamens cr√©√©s par le prof
            studentsCount: prof.exams.reduce((sum, exam) => sum + exam.submissions.length, 0) // üî• Compte les √©tudiants
        }));

        res.status(200).json(formattedProfessors);
    } catch (error) {
        next(errorHandler(500, "Erreur lors de la r√©cup√©ration des professeurs"));
    }
};


const handleRejectProf = async (req, res, next) => {
    try {
        const { professorId } = req.params;

        // V√©rifier si le professeur existe
        const professor = await User.findByPk(professorId);
        if (!professor || professor.role !== "professor") {
            return next(errorHandler(404, "Professeur non trouv√©"));
        }

        // Suppression logique (soft delete) : set null sur les d√©pendances
        await professor.destroy();

        res.status(200).json({ message: "Compte professeur d√©sactiv√© avec succ√®s" });
    } catch (error) {
        console.error("Erreur lors de la suppression du professeur:", error);
        next(errorHandler(500, "Impossible de supprimer le professeur"));
    }
};

const handleToggleStatus = async (req, res, next) => {
    try {
        const { professorId } = req.params;

        // V√©rifier si le professeur existe
        const professor = await User.findByPk(professorId);
        if (!professor || professor.role !== "professor") {
            return next(errorHandler(404, "Professeur non trouv√©"));
        }

        // Basculement du statut : active <-> pending
        professor.status = professor.status === "active" ? "pending" : "active";
        await professor.save();

        res.status(200).json({ message: `Statut mis √† jour: ${professor.status}`, professor });
    } catch (error) {
        console.error("Erreur lors du changement de statut du professeur:", error);
        next(errorHandler(500, "Impossible de modifier le statut"));
    }
};

const approveProfessor = async (req, res, next) => {
    try {
        const { professorId } = req.params;

        // üî• V√©rifier si l'utilisateur existe et est bien un professeur
        const professor = await User.findOne({
            where: { id: professorId, role: "professor" },
        });

        if (!professor) {
            return next(errorHandler(404, "Professeur non trouv√©"));
        }

        // üî• V√©rifier si le compte est d√©j√† activ√©
        if (professor.status === "active") {
            return next(errorHandler(400, "Le compte est d√©j√† activ√©"));
        }

        // ‚úÖ Mettre √† jour le statut du professeur
        professor.status = "active";
        await professor.save();

        // Envoyer email de confirmation
        const emailResult = await sendAccountApprovalEmail(professor.email, professor.prenom, professor.nom);

        if (!emailResult.success) {
            // L'approbation a fonctionn√© mais l'email a √©chou√©
            return res.status(200).json({
                success: true,
                message: 'Compte approuv√© mais l\'email n\'a pas pu √™tre envoy√©',
                professor,
                emailError: emailResult.error
            });
        }

        res.status(200).json({
            message: `Le professeur ${professor.email} a √©t√© approuv√© avec succ√®s.`,
            professor,
        });

        // // üî• Envoyer un email avec Resend apr√®s activation
        // sendApprovalEmail(professor.email, professor.prenom);

    } catch (error) {
        next(errorHandler(500, "Erreur lors de l'activation du professeur : " + error.message));
    }
};


module.exports = { getAllUsers, getUserById, updateUser, deleteUser, validateProfessor, getPendingProfessors, getAllProfessors, handleRejectProf, handleToggleStatus, approveProfessor };